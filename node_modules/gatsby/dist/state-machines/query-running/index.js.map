{"version":3,"sources":["../../../src/state-machines/query-running/index.ts"],"names":["queryStates","initial","id","context","states","extractingQueries","invoke","src","onDone","target","writingRequires","calculatingDirtyQueries","actions","runningStaticQueries","runningPageQueries","waitingForJobs","done","type","queryRunningMachine","queryActions","services","queryRunningServices"],"mappings":";;;;;AAAA;;AAEA;;AACA;;AAEA;;;AAIO,MAAMA,WAA0D,GAAG;AACxEC,EAAAA,OAAO,EAAG,mBAD8D;AAExEC,EAAAA,EAAE,EAAG,qBAFmE;AAGxEC,EAAAA,OAAO,EAAE,EAH+D;AAIxEC,EAAAA,MAAM,EAAE;AACNC,IAAAA,iBAAiB,EAAE;AACjBH,MAAAA,EAAE,EAAG,oBADY;AAEjBI,MAAAA,MAAM,EAAE;AACNJ,QAAAA,EAAE,EAAG,oBADC;AAENK,QAAAA,GAAG,EAAG,gBAFA;AAGNC,QAAAA,MAAM,EAAE;AACNC,UAAAA,MAAM,EAAG;AADH;AAHF;AAFS,KADb;AAWNC,IAAAA,eAAe,EAAE;AACfJ,MAAAA,MAAM,EAAE;AACNC,QAAAA,GAAG,EAAG,kBADA;AAENL,QAAAA,EAAE,EAAG,kBAFC;AAGNM,QAAAA,MAAM,EAAE;AACNC,UAAAA,MAAM,EAAG;AADH;AAHF;AADO,KAXX;AAoBNE,IAAAA,uBAAuB,EAAE;AACvBL,MAAAA,MAAM,EAAE;AACNJ,QAAAA,EAAE,EAAG,2BADC;AAENK,QAAAA,GAAG,EAAG,uBAFA;AAGNC,QAAAA,MAAM,EAAE;AACNC,UAAAA,MAAM,EAAG,sBADH;AAENG,UAAAA,OAAO,EAAG;AAFJ;AAHF;AADe,KApBnB;AA8BNC,IAAAA,oBAAoB,EAAE;AACpBP,MAAAA,MAAM,EAAE;AACNC,QAAAA,GAAG,EAAG,kBADA;AAENL,QAAAA,EAAE,EAAG,wBAFC;AAGNM,QAAAA,MAAM,EAAE;AACNC,UAAAA,MAAM,EAAG;AADH;AAHF;AADY,KA9BhB;AAuCNK,IAAAA,kBAAkB,EAAE;AAClBR,MAAAA,MAAM,EAAE;AACNC,QAAAA,GAAG,EAAG,gBADA;AAENL,QAAAA,EAAE,EAAG,sBAFC;AAGNM,QAAAA,MAAM,EAAE;AACNC,UAAAA,MAAM,EAAG,gBADH;AAENG,UAAAA,OAAO,EAAG;AAFJ;AAHF;AADU,KAvCd;AAiDN;AACAG,IAAAA,cAAc,EAAE;AACdT,MAAAA,MAAM,EAAE;AACNC,QAAAA,GAAG,EAAG,0BADA;AAENL,QAAAA,EAAE,EAAG,kBAFC;AAGNM,QAAAA,MAAM,EAAE;AACNC,UAAAA,MAAM,EAAG;AADH;AAHF;AADM,KAlDV;AA2DNO,IAAAA,IAAI,EAAE;AACJC,MAAAA,IAAI,EAAG;AADH;AA3DA;AAJgE,CAAnE;;AAoEA,MAAMC,mBAAmB,GAAG,qBAAQlB,WAAR,EAAqB;AACtDY,EAAAA,OAAO,EAAEO,qBAD6C;AAEtDC,EAAAA,QAAQ,EAAEC;AAF4C,CAArB,CAA5B","sourcesContent":["import { MachineConfig, Machine } from \"xstate\"\nimport { IQueryRunningContext } from \"./types\"\nimport { queryRunningServices } from \"./services\"\nimport { queryActions } from \"./actions\"\n\n/**\n * This is a child state machine, spawned to perform the query running\n */\n\nexport const queryStates: MachineConfig<IQueryRunningContext, any, any> = {\n  initial: `extractingQueries`,\n  id: `queryRunningMachine`,\n  context: {},\n  states: {\n    extractingQueries: {\n      id: `extracting-queries`,\n      invoke: {\n        id: `extracting-queries`,\n        src: `extractQueries`,\n        onDone: {\n          target: `writingRequires`,\n        },\n      },\n    },\n    writingRequires: {\n      invoke: {\n        src: `writeOutRequires`,\n        id: `writing-requires`,\n        onDone: {\n          target: `calculatingDirtyQueries`,\n        },\n      },\n    },\n    calculatingDirtyQueries: {\n      invoke: {\n        id: `calculating-dirty-queries`,\n        src: `calculateDirtyQueries`,\n        onDone: {\n          target: `runningStaticQueries`,\n          actions: `assignDirtyQueries`,\n        },\n      },\n    },\n    runningStaticQueries: {\n      invoke: {\n        src: `runStaticQueries`,\n        id: `running-static-queries`,\n        onDone: {\n          target: `runningPageQueries`,\n        },\n      },\n    },\n    runningPageQueries: {\n      invoke: {\n        src: `runPageQueries`,\n        id: `running-page-queries`,\n        onDone: {\n          target: `waitingForJobs`,\n          actions: `flushPageData`,\n        },\n      },\n    },\n    // This waits for the jobs API to finish\n    waitingForJobs: {\n      invoke: {\n        src: `waitUntilAllJobsComplete`,\n        id: `waiting-for-jobs`,\n        onDone: {\n          target: `done`,\n        },\n      },\n    },\n    done: {\n      type: `final`,\n    },\n  },\n}\nexport const queryRunningMachine = Machine(queryStates, {\n  actions: queryActions,\n  services: queryRunningServices,\n})\n"],"file":"index.js"}