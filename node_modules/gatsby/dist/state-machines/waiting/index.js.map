{"version":3,"sources":["../../../src/state-machines/waiting/index.ts"],"names":["NODE_MUTATION_BATCH_SIZE","NODE_MUTATION_BATCH_TIMEOUT","waitingStates","id","initial","context","nodeMutationBatch","runningBatch","states","idle","always","cond","ctx","length","target","on","ADD_NODE_MUTATION","actions","QUERY_FILE_CHANGED","batchingNodeMutations","after","committingBatch","entry","invoke","src","onDone","rebuild","type","data","waitingMachine","waitingActions","services","waitingServices"],"mappings":";;;;;AAAA;;AAEA;;AACA;;AAEA,MAAMA,wBAAwB,GAAG,GAAjC;AACA,MAAMC,2BAA2B,GAAG,IAApC;;AAIA;;;;AAIO,MAAMC,aAAuD,GAAG;AACrEC,EAAAA,EAAE,EAAG,gBADgE;AAErEC,EAAAA,OAAO,EAAG,MAF2D;AAGrEC,EAAAA,OAAO,EAAE;AACPC,IAAAA,iBAAiB,EAAE,EADZ;AAEPC,IAAAA,YAAY,EAAE;AAFP,GAH4D;AAOrEC,EAAAA,MAAM,EAAE;AACNC,IAAAA,IAAI,EAAE;AACJC,MAAAA,MAAM,EAAE;AACN;AACA;AACAC,QAAAA,IAAI,EAAGC,GAAD,IAAkB,CAAC,CAACA,GAAG,CAACN,iBAAJ,CAAsBO,MAH1C;AAINC,QAAAA,MAAM,EAAG;AAJH,OADJ;AAOJC,MAAAA,EAAE,EAAE;AACFC,QAAAA,iBAAiB,EAAE;AACjBC,UAAAA,OAAO,EAAG,iBADO;AAEjBH,UAAAA,MAAM,EAAG;AAFQ,SADjB;AAKF;AACA;AACAI,QAAAA,kBAAkB,EAAE;AAClBD,UAAAA,OAAO,EAAG;AADQ;AAPlB;AAPA,KADA;AAqBNE,IAAAA,qBAAqB,EAAE;AACrB;AACAT,MAAAA,MAAM,EAAE;AACNC,QAAAA,IAAI,EAAGC,GAAD,IACJA,GAAG,CAACN,iBAAJ,CAAsBO,MAAtB,IAAgCb,wBAF5B;AAGNc,QAAAA,MAAM,EAAG;AAHH,OAFa;AAOrBC,MAAAA,EAAE,EAAE;AACF;AACAC,QAAAA,iBAAiB,EAAE,CACjB;AACA;AACE;AACAC,UAAAA,OAAO,EAAG,iBAFZ;AAGEN,UAAAA,IAAI,EAAGC,GAAD,IACJA,GAAG,CAACN,iBAAJ,CAAsBO,MAAtB,IAAgCb,wBAJpC;AAKEc,UAAAA,MAAM,EAAG;AALX,SAFiB,EASjB;AACE;AACAG,UAAAA,OAAO,EAAG;AAFZ,SATiB;AAFjB,OAPiB;AAwBrBG,MAAAA,KAAK,EAAE;AACL;AACA,SAACnB,2BAAD,GAAgC;AAF3B;AAxBc,KArBjB;AAkDNoB,IAAAA,eAAe,EAAE;AACfC,MAAAA,KAAK,EAAE,oBAAwB,CAAC;AAAEhB,QAAAA;AAAF,OAAD,KAA2B;AACxD,eAAO;AACLA,UAAAA,iBAAiB,EAAE,EADd;AAELC,UAAAA,YAAY,EAAED;AAFT,SAAP;AAID,OALM,CADQ;AAOfS,MAAAA,EAAE,EAAE;AACF;AACAC,QAAAA,iBAAiB,EAAE;AACjBC,UAAAA,OAAO,EAAG;AADO;AAFjB,OAPW;AAafM,MAAAA,MAAM,EAAE;AACNC,QAAAA,GAAG,EAAG,kBADA;AAEN;AACAC,QAAAA,MAAM,EAAE;AACNR,UAAAA,OAAO,EAAE,oBAA6B;AACpCV,YAAAA,YAAY,EAAE;AADsB,WAA7B,CADH;AAINO,UAAAA,MAAM,EAAG;AAJH;AAHF;AAbO,KAlDX;AA0ENY,IAAAA,OAAO,EAAE;AACPC,MAAAA,IAAI,EAAG,OADA;AAEP;AACA;AACAC,MAAAA,IAAI,EAAE,CAAC;AAAEtB,QAAAA;AAAF,OAAD,KAA0C;AAC9C,eAAO;AAAEA,UAAAA;AAAF,SAAP;AACD;AANM;AA1EH;AAP6D,CAAhE;;AA4FA,MAAMuB,cAAc,GAAG,qBAAQ3B,aAAR,EAAuB;AACnDe,EAAAA,OAAO,EAAEa,uBAD0C;AAEnDC,EAAAA,QAAQ,EAAEC;AAFyC,CAAvB,CAAvB","sourcesContent":["import { MachineConfig, assign, Machine } from \"xstate\"\nimport { IWaitingContext } from \"./types\"\nimport { waitingActions } from \"./actions\"\nimport { waitingServices } from \"./services\"\n\nconst NODE_MUTATION_BATCH_SIZE = 100\nconst NODE_MUTATION_BATCH_TIMEOUT = 1000\n\nexport type WaitingResult = Pick<IWaitingContext, \"nodeMutationBatch\">\n\n/**\n * This idle state also handles batching of node mutations and running of\n * mutations when we first start it\n */\nexport const waitingStates: MachineConfig<IWaitingContext, any, any> = {\n  id: `waitingMachine`,\n  initial: `idle`,\n  context: {\n    nodeMutationBatch: [],\n    runningBatch: [],\n  },\n  states: {\n    idle: {\n      always: {\n        // If we already have queued node mutations, move\n        // immediately to batching\n        cond: (ctx): boolean => !!ctx.nodeMutationBatch.length,\n        target: `batchingNodeMutations`,\n      },\n      on: {\n        ADD_NODE_MUTATION: {\n          actions: `addNodeMutation`,\n          target: `batchingNodeMutations`,\n        },\n        // We only listen for this when idling because if we receive it at any\n        // other point we're already going to create pages etc\n        QUERY_FILE_CHANGED: {\n          actions: `extractQueries`,\n        },\n      },\n    },\n\n    batchingNodeMutations: {\n      // Check if the batch is already full on entry\n      always: {\n        cond: (ctx): boolean =>\n          ctx.nodeMutationBatch.length >= NODE_MUTATION_BATCH_SIZE,\n        target: `committingBatch`,\n      },\n      on: {\n        // More mutations added to batch\n        ADD_NODE_MUTATION: [\n          // You know the score: only run the first matching transition\n          {\n            // If this fills the batch then commit it\n            actions: `addNodeMutation`,\n            cond: (ctx): boolean =>\n              ctx.nodeMutationBatch.length >= NODE_MUTATION_BATCH_SIZE,\n            target: `committingBatch`,\n          },\n          {\n            // ...otherwise just add it to the batch\n            actions: `addNodeMutation`,\n          },\n        ],\n      },\n      after: {\n        // Time's up\n        [NODE_MUTATION_BATCH_TIMEOUT]: `committingBatch`,\n      },\n    },\n    committingBatch: {\n      entry: assign<IWaitingContext>(({ nodeMutationBatch }) => {\n        return {\n          nodeMutationBatch: [],\n          runningBatch: nodeMutationBatch,\n        }\n      }),\n      on: {\n        // While we're running the batch we need to batch any incoming mutations too\n        ADD_NODE_MUTATION: {\n          actions: `addNodeMutation`,\n        },\n      },\n      invoke: {\n        src: `runMutationBatch`,\n        // When we're done, clear the running batch ready for next time\n        onDone: {\n          actions: assign<IWaitingContext, any>({\n            runningBatch: [],\n          }),\n          target: `rebuild`,\n        },\n      },\n    },\n    rebuild: {\n      type: `final`,\n      // This is returned to the parent. The batch includes\n      // any mutations that arrived while we were running the other batch\n      data: ({ nodeMutationBatch }): WaitingResult => {\n        return { nodeMutationBatch }\n      },\n    },\n  },\n}\n\nexport const waitingMachine = Machine(waitingStates, {\n  actions: waitingActions,\n  services: waitingServices,\n})\n"],"file":"index.js"}