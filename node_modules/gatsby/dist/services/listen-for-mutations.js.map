{"version":3,"sources":["../../src/services/listen-for-mutations.ts"],"names":["listenForMutations","callback","emitMutation","event","type","payload","emitFileChange","emitQueryChange","emitWebhook","emitter","on","unsubscribeFromMutationListening","off"],"mappings":";;;;;AAAA;;AAGO,MAAMA,kBAAkC,GAAIC,QAAD,IAA2B;AAC3E,QAAMC,YAAY,GAAIC,KAAD,IAA0B;AAC7CF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAG,mBAAT;AAA6BC,MAAAA,OAAO,EAAEF;AAAtC,KAAD,CAAR;AACD,GAFD;;AAIA,QAAMG,cAAc,GAAIH,KAAD,IAA0B;AAC/CF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAG,qBAAT;AAA+BC,MAAAA,OAAO,EAAEF;AAAxC,KAAD,CAAR;AACD,GAFD;;AAIA,QAAMI,eAAe,GAAIJ,KAAD,IAA0B;AAChDF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAG,oBAAT;AAA8BC,MAAAA,OAAO,EAAEF;AAAvC,KAAD,CAAR;AACD,GAFD;;AAIA,QAAMK,WAAW,GAAIL,KAAD,IAA0B;AAC5CF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAG,kBAAT;AAA4BC,MAAAA,OAAO,EAAEF;AAArC,KAAD,CAAR;AACD,GAFD;;AAIAM,iBAAQC,EAAR,CAAY,uBAAZ,EAAoCR,YAApC;;AACAO,iBAAQC,EAAR,CAAY,kBAAZ,EAA+BF,WAA/B;;AACAC,iBAAQC,EAAR,CAAY,qBAAZ,EAAkCJ,cAAlC;;AACAG,iBAAQC,EAAR,CAAY,oBAAZ,EAAiCH,eAAjC;;AAEA,SAAO,SAASI,gCAAT,GAAkD;AACvDF,mBAAQG,GAAR,CAAa,uBAAb,EAAqCV,YAArC;;AACAO,mBAAQG,GAAR,CAAa,qBAAb,EAAmCN,cAAnC;;AACAG,mBAAQG,GAAR,CAAa,kBAAb,EAAgCJ,WAAhC;;AACAC,mBAAQG,GAAR,CAAa,oBAAb,EAAkCL,eAAlC;AACD,GALD;AAMD,CA5BM","sourcesContent":["import { emitter } from \"../redux\"\nimport { InvokeCallback, Sender } from \"xstate\"\n\nexport const listenForMutations: InvokeCallback = (callback: Sender<any>) => {\n  const emitMutation = (event: unknown): void => {\n    callback({ type: `ADD_NODE_MUTATION`, payload: event })\n  }\n\n  const emitFileChange = (event: unknown): void => {\n    callback({ type: `SOURCE_FILE_CHANGED`, payload: event })\n  }\n\n  const emitQueryChange = (event: unknown): void => {\n    callback({ type: `QUERY_FILE_CHANGED`, payload: event })\n  }\n\n  const emitWebhook = (event: unknown): void => {\n    callback({ type: `WEBHOOK_RECEIVED`, payload: event })\n  }\n\n  emitter.on(`ENQUEUE_NODE_MUTATION`, emitMutation)\n  emitter.on(`WEBHOOK_RECEIVED`, emitWebhook)\n  emitter.on(`SOURCE_FILE_CHANGED`, emitFileChange)\n  emitter.on(`QUERY_FILE_CHANGED`, emitQueryChange)\n\n  return function unsubscribeFromMutationListening(): void {\n    emitter.off(`ENQUEUE_NODE_MUTATION`, emitMutation)\n    emitter.off(`SOURCE_FILE_CHANGED`, emitFileChange)\n    emitter.off(`WEBHOOK_RECEIVED`, emitWebhook)\n    emitter.off(`QUERY_FILE_CHANGED`, emitQueryChange)\n  }\n}\n"],"file":"listen-for-mutations.js"}